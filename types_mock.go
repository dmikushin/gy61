// Code generated by MockGen. DO NOT EDIT.
// Source: types.go

// Package gy61 is a generated GoMock package.
package gy61

import (
	gomock "github.com/golang/mock/gomock"
	serial "github.com/tarm/serial"
	reflect "reflect"
)

// MockSerial is a mock of Serial interface
type MockSerial struct {
	ctrl     *gomock.Controller
	recorder *MockSerialMockRecorder
}

// MockSerialMockRecorder is the mock recorder for MockSerial
type MockSerialMockRecorder struct {
	mock *MockSerial
}

// NewMockSerial creates a new mock instance
func NewMockSerial(ctrl *gomock.Controller) *MockSerial {
	mock := &MockSerial{ctrl: ctrl}
	mock.recorder = &MockSerialMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSerial) EXPECT() *MockSerialMockRecorder {
	return m.recorder
}

// OpenSerial mocks base method
func (m *MockSerial) OpenSerial(c *serial.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenSerial", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// OpenSerial indicates an expected call of OpenSerial
func (mr *MockSerialMockRecorder) OpenSerial(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenSerial", reflect.TypeOf((*MockSerial)(nil).OpenSerial), c)
}

// Write mocks base method
func (m *MockSerial) Write(b []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", b)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write
func (mr *MockSerialMockRecorder) Write(b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockSerial)(nil).Write), b)
}

// Read mocks base method
func (m *MockSerial) Read(b []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", b)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockSerialMockRecorder) Read(b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockSerial)(nil).Read), b)
}

// Close mocks base method
func (m *MockSerial) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockSerialMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSerial)(nil).Close))
}
